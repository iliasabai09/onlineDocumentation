import {db} from "../../firebase.ts";
import {collection, addDoc, getDocs, getDoc, doc, updateDoc, deleteDoc} from "firebase/firestore";
import {get, set, del, keys} from "idb-keyval"; // –†–∞–±–æ—Ç–∞ —Å IndexedDB

const col = "documents";
const itemsCollection = collection(db, col);

async function _getAllData() {
    const allKeys = await keys(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
    const allData = await Promise.all(allKeys.map(key => get(key))); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è

    return allKeys.map((_key, index) => allData[index]);
}

// ‚úÖ –ß—Ç–µ–Ω–∏–µ (Read) (Firestore —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IndexedDB)
export const getItems = async () => {
    const indexedDbData = await _getAllData();
    if (indexedDbData && indexedDbData.length) return indexedDbData;
    const snapshot = await getDocs(itemsCollection);
    const data = snapshot.docs.map((doc) => ({id: doc.id, ...doc.data()}));
    for (const doc1 of data) {
        await set(doc1.id, doc1); // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    }
    return data
};

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ (Create)
export const addItem = async (newItem: any) => {
    const docRef = await addDoc(itemsCollection, newItem);
    const data = {id: docRef.id, ...newItem};
    await set(docRef.id, data);
    return data;
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (Update)
export const updateItem = async (id: string, updatedData: any) => {
    await updateDoc(doc(db, col, id), updatedData);
    const data = {id, ...updatedData};
    await set(id, JSON.parse(JSON.stringify(data)));
    return data;
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ (Delete)
export const deleteItem = async (id: string) => {
    try {
        await deleteDoc(doc(db, col, id));
        await del(id); // –û—á–∏—Å—Ç–∫–∞ –∏–∑ IndexedDB
        console.log(`üóëÔ∏è –î–æ–∫—É–º–µ–Ω—Ç ${id} —É–¥–∞–ª—ë–Ω`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
    }
};


export const getItemById = async (id: string) => {
    const fromCache = await get(id);
    console.log('fromCachefromCachefromCache', fromCache)
    if (fromCache) return fromCache;
    const docRef = doc(db, col, id); // –°—Å—ã–ª–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const snapshot = await getDoc(docRef);

    if (!snapshot.exists()) {
        console.warn(`‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —Å id "${id}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
    }

    const data = {id: snapshot.id, ...snapshot.data()};
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç:", data);
    await set(id, data);
    return data;
};


export const exportCollection = async () => {
    const colRef = collection(db, col);
    const snapshot = await getDocs(colRef);
    const data = snapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    const jsonData = JSON.stringify(data, null, 2);
    console.log("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç JSON:", jsonData);

    // –°–æ–∑–¥–∞–Ω–∏–µ Blob-–æ–±—ä–µ–∫—Ç–∞
    const blob = new Blob([jsonData], {type: "application/json"});
    const url = URL.createObjectURL(blob);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const a = document.createElement("a");
    a.href = url;
    a.download = `${col}_backup.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
};

export const restoreCollection = async (collectionName: string, jsonData: string) => {
    const data = JSON.parse(jsonData);
    const colRef = collection(db, collectionName);

    for (const docData of data) {
        const {id, ...fields} = docData;
        await addDoc(colRef, fields); // Firestore —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ ID
    }

    console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ JSON`);
};
